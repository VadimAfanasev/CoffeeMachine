<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CoffeeMachine</name>
    </assembly>
    <members>
        <member name="T:CoffeeMachine.Auth.ITokenService">
            <summary>
            The interface in which we describe the method for creating a token
            </summary>
        </member>
        <member name="M:CoffeeMachine.Auth.ITokenService.BuildToken(System.String,System.String,CoffeeMachine.Auth.User.UserDto)">
            <summary>
            The method in which the token is created
            </summary>
            <param name="key"> </param>
            <param name="issuer"> </param>
            <param name="user"> </param>
            <returns> token </returns>
        </member>
        <member name="T:CoffeeMachine.Auth.IUserRepository">
            <summary>
            An interface that describes obtaining a valid user
            </summary>
        </member>
        <member name="M:CoffeeMachine.Auth.IUserRepository.GetUserAsync(CoffeeMachine.Auth.User.UserModel)">
            <summary>
            The method by which we obtain a valid user for authentication
            </summary>
            <param name="userModel"> </param>
            <returns> UserDto </returns>
            <exception cref="T:System.Exception"> </exception>
        </member>
        <member name="T:CoffeeMachine.Auth.TokenService">
            <summary>
            The class in which the token creation method is implemented
            </summary>
        </member>
        <member name="F:CoffeeMachine.Auth.TokenService._expiryDuration">
            <summary>
            Token lifetime
            </summary>
        </member>
        <member name="M:CoffeeMachine.Auth.TokenService.BuildToken(System.String,System.String,CoffeeMachine.Auth.User.UserDto)">
            <inheritdoc />
        </member>
        <member name="T:CoffeeMachine.Auth.User">
            <summary>
            Class describing the user
            </summary>
        </member>
        <member name="T:CoffeeMachine.Auth.User.UserDto">
            <summary>
            Identifying the user Dto
            </summary>
            <param name="UserName"> </param>
            <param name="Password"> </param>
        </member>
        <member name="M:CoffeeMachine.Auth.User.UserDto.#ctor(System.String,System.String)">
            <summary>
            Identifying the user Dto
            </summary>
            <param name="UserName"> </param>
            <param name="Password"> </param>
        </member>
        <member name="P:CoffeeMachine.Auth.User.UserDto.UserName">
            <summary> </summary>
        </member>
        <member name="P:CoffeeMachine.Auth.User.UserDto.Password">
            <summary> </summary>
        </member>
        <member name="T:CoffeeMachine.Auth.User.UserModel">
            <summary>
            Identifying the UserModel
            </summary>
        </member>
        <member name="P:CoffeeMachine.Auth.User.UserModel.Password">
            <summary>
            Validity check password
            </summary>
        </member>
        <member name="P:CoffeeMachine.Auth.User.UserModel.UserName">
            <summary>
            Username for validation
            </summary>
        </member>
        <member name="T:CoffeeMachine.Auth.UserRepository">
            <summary>
            The class in which we implement obtaining a valid user for authentication
            </summary>
        </member>
        <member name="P:CoffeeMachine.Auth.UserRepository.Users">
            <summary>
            List of valid users
            </summary>
        </member>
        <member name="M:CoffeeMachine.Auth.UserRepository.GetUserAsync(CoffeeMachine.Auth.User.UserModel)">
            <inheritdoc />
        </member>
        <member name="T:CoffeeMachine.Common.CalculateChange">
            <summary>
            A class that implements methods for calculating change after buying coffee
            </summary>
        </member>
        <member name="F:CoffeeMachine.Common.CalculateChange._db">
            <summary>
            Injecting the database context CoffeeContext
            </summary>
        </member>
        <member name="M:CoffeeMachine.Common.CalculateChange.#ctor(CoffeeMachine.Models.Data.CoffeeContext)">
            <summary>
            Constructor of the class in which we calculate change
            </summary>
            <param name="db"> </param>
        </member>
        <member name="M:CoffeeMachine.Common.CalculateChange.CalculateAsync(System.UInt32)">
            <inheritdoc />
        </member>
        <member name="T:CoffeeMachine.Common.DecrementAvailableNotes">
            <summary>
            A class in which banknotes issued as change are subtracted from the database
            </summary>
        </member>
        <member name="F:CoffeeMachine.Common.DecrementAvailableNotes._db">
            <summary>
            Injecting the database context CoffeeContext
            </summary>
        </member>
        <member name="M:CoffeeMachine.Common.DecrementAvailableNotes.#ctor(CoffeeMachine.Models.Data.CoffeeContext)">
            <summary>
            Constructor of the class in which issued banknotes are subtracted from the database
            </summary>
            <param name="db"> </param>
        </member>
        <member name="M:CoffeeMachine.Common.DecrementAvailableNotes.DecrementAvailableNoteAsync(System.Collections.Generic.List{System.UInt32})">
            <inheritdoc />
        </member>
        <member name="T:CoffeeMachine.Common.EnumBanknotes">
            <summary>
            Class listing banknotes available for insertion into the machine
            </summary>
        </member>
        <member name="T:CoffeeMachine.Common.EnumBanknotes.Banknotes">
            <summary>
            List of banknote denominations available for calculation
            </summary>
        </member>
        <member name="T:CoffeeMachine.Common.IncrementAvailableNotes">
            <summary>
            The class in which we implement adding money contributed by the user to the database
            </summary>
        </member>
        <member name="F:CoffeeMachine.Common.IncrementAvailableNotes._db">
            <summary>
            Injecting the database context CoffeeContext
            </summary>
        </member>
        <member name="M:CoffeeMachine.Common.IncrementAvailableNotes.#ctor(CoffeeMachine.Models.Data.CoffeeContext)">
            <summary>
            Constructor of the class in which we implement adding money to the database
            </summary>
            <param name="db"> </param>
        </member>
        <member name="M:CoffeeMachine.Common.IncrementAvailableNotes.IncrementAvailableNoteAsync(System.UInt32[])">
            <inheritdoc />
        </member>
        <member name="T:CoffeeMachine.Common.IncrementCoffeeBalances">
            <summary>
            A class in which we implement adding coffee purchased by the user to the database
            </summary>
        </member>
        <member name="F:CoffeeMachine.Common.IncrementCoffeeBalances._db">
            <summary>
            Injecting the database context CoffeeContext
            </summary>
        </member>
        <member name="M:CoffeeMachine.Common.IncrementCoffeeBalances.#ctor(CoffeeMachine.Models.Data.CoffeeContext)">
            <summary>
            Constructor of the class in which we implement adding purchased coffee to the database
            </summary>
            <param name="db"> </param>
        </member>
        <member name="M:CoffeeMachine.Common.IncrementCoffeeBalances.IncrementCoffeeBalanceAsync(System.String,System.UInt32)">
            <inheritdoc />
        </member>
        <member name="T:CoffeeMachine.Common.IncrementMoneyInMachine">
            <summary>
            The class in which we implement adding money to the coffee machine by the administrator
            </summary>
        </member>
        <member name="F:CoffeeMachine.Common.IncrementMoneyInMachine._db">
            <summary>
            Injecting database context
            </summary>
        </member>
        <member name="M:CoffeeMachine.Common.IncrementMoneyInMachine.#ctor(CoffeeMachine.Models.Data.CoffeeContext)">
            <summary>
            Constructor of the class in which we implement adding money to the coffee machine
            </summary>
            <param name="db"> </param>
        </member>
        <member name="M:CoffeeMachine.Common.IncrementMoneyInMachine.IncrementMoneyAsync(System.Collections.Generic.List{CoffeeMachine.Dto.MoneyDto})">
            <inheritdoc />
        </member>
        <member name="T:CoffeeMachine.Common.Interfaces.ICalculateChange">
            <summary>
            An interface that describes the method for calculating change
            </summary>
        </member>
        <member name="M:CoffeeMachine.Common.Interfaces.ICalculateChange.CalculateAsync(System.UInt32)">
            <summary>
            Method for calculating change
            </summary>
            <param name="amount"> </param>
            <returns> The List of <paramref name="amount" /> </returns>
        </member>
        <member name="T:CoffeeMachine.Common.Interfaces.IDecrementAvailableNotes">
            <summary>
            An interface that implements methods for deducting banknotes issued as change from the database
            </summary>
        </member>
        <member name="M:CoffeeMachine.Common.Interfaces.IDecrementAvailableNotes.DecrementAvailableNoteAsync(System.Collections.Generic.List{System.UInt32})">
            <summary>
            Method for deducting banknotes issued as change from the database
            </summary>
            <param name="change"> </param>
            <exception cref="T:System.Exception"> </exception>
        </member>
        <member name="T:CoffeeMachine.Common.Interfaces.IIncrementAvailableNotes">
            <summary>
            An interface in which we implement a method for adding user-deposited bills
            </summary>
        </member>
        <member name="M:CoffeeMachine.Common.Interfaces.IIncrementAvailableNotes.IncrementAvailableNoteAsync(System.UInt32[])">
            <summary>
            Adding money contributed by the user to the table
            </summary>
            <param name="inputMoney"> </param>
            <exception cref="T:System.Exception"> </exception>
        </member>
        <member name="T:CoffeeMachine.Common.Interfaces.IIncrementCoffeeBalances">
            <summary>
            An interface in which we describe adding the amount of purchased coffee to the database
            </summary>
        </member>
        <member name="M:CoffeeMachine.Common.Interfaces.IIncrementCoffeeBalances.IncrementCoffeeBalanceAsync(System.String,System.UInt32)">
            <summary>
            A method in which we add the amount of purchased coffee to the database
            </summary>
            <param name="coffeeType"> </param>
            <param name="coffeePrice"> </param>
            <exception cref="T:System.Exception"> </exception>
        </member>
        <member name="T:CoffeeMachine.Common.Interfaces.IIncrementMoneyInMachine">
            <summary>
            An interface in which we define a method for depositing money into a coffee machine
            </summary>
        </member>
        <member name="M:CoffeeMachine.Common.Interfaces.IIncrementMoneyInMachine.IncrementMoneyAsync(System.Collections.Generic.List{CoffeeMachine.Dto.MoneyDto})">
            <summary>
            Method for the administrator to deposit money into the coffee machine
            </summary>
            <param name="inputMoney"> </param>
            <exception cref="T:System.Exception"> </exception>
        </member>
        <member name="T:CoffeeMachine.Controllers.CoffeeMachineAdministratorController">
            <summary>
            The class that implements the requests for obtaining the status of the coffee machine
            </summary>
        </member>
        <member name="F:CoffeeMachine.Controllers.CoffeeMachineAdministratorController._coffeeMachineStatusService">
            <summary>
            Coffee status service dependency injection
            </summary>
        </member>
        <member name="F:CoffeeMachine.Controllers.CoffeeMachineAdministratorController._inputMoneyService">
            <summary>
            Input money service dependency injection
            </summary>
        </member>
        <member name="M:CoffeeMachine.Controllers.CoffeeMachineAdministratorController.#ctor(CoffeeMachine.Services.Interfaces.IInputMoneyServices,CoffeeMachine.Services.Interfaces.ICoffeeMachineStatusServices)">
            <summary>
            Constructor of the class that obtaining the status of the coffee machine
            </summary>
            <param name="inputMoneyService"> </param>
            <param name="coffeeMachineStatusService"> </param>
        </member>
        <member name="M:CoffeeMachine.Controllers.CoffeeMachineAdministratorController.GetCoffeeBalanceAsync">
            <summary>
            Get the amount of purchased coffee from the coffee machine
            </summary>
            <response code="200"> Success </response>
            <response code="404"> Entity not found in the system </response>
        </member>
        <member name="M:CoffeeMachine.Controllers.CoffeeMachineAdministratorController.GetMoneyInMachineAsync">
            <summary>
            Get the amount of money from the coffee machine
            </summary>
            <response code="200"> Success </response>
            <response code="404"> Entity not found in the system </response>
        </member>
        <member name="M:CoffeeMachine.Controllers.CoffeeMachineAdministratorController.InputMoneyAsync(System.Collections.Generic.List{CoffeeMachine.Dto.MoneyDto})">
            <summary>
            Deposit money into the coffee machine
            </summary>
            <remarks>
            Sample request:
            Put /note
            {
            title: "money deposited"
            }
            </remarks>
            <param name="inputMoney"> InputMoneyDto object </param>
            <returns> Returns NoContent </returns>
            <response code="200"> Success </response>
            <response code="400"> Invalid banknotes type </response>
        </member>
        <member name="T:CoffeeMachine.Controllers.CoffeeMachineBuyController">
            <summary>
            The class implements requests for purchasing coffee from a coffee machine
            </summary>
        </member>
        <member name="F:CoffeeMachine.Controllers.CoffeeMachineBuyController._coffeeBuyService">
            <summary>
            Coffee buy service dependency injection
            </summary>
        </member>
        <member name="M:CoffeeMachine.Controllers.CoffeeMachineBuyController.#ctor(CoffeeMachine.Services.Interfaces.ICoffeeBuyServices)">
            <summary>
            Constructor of a class that implements request for buying coffee
            </summary>
            <param name="coffeeBuyService"> </param>
        </member>
        <member name="M:CoffeeMachine.Controllers.CoffeeMachineBuyController.PlaceOrder(System.String,System.UInt32[])">
            <summary>
            Buying coffee
            </summary>
            <remarks>
            Sample request:
            Post /note
            {
            title: "coffee bought"
            }
            </remarks>
            <param name="coffeeType"> CoffeeType object </param>
            <param name="moneys"> Moneys object </param>
            <returns> Returns change (guid) </returns>
            <response code="200"> Success </response>
            <response code="400"> Incorrect data entered </response>
            <response code="404"> Entity not found in the system </response>
        </member>
        <member name="T:CoffeeMachine.Controllers.CoffeeMachineLoginController">
            <summary>
            The class that implements the authentication request
            </summary>
        </member>
        <member name="F:CoffeeMachine.Controllers.CoffeeMachineLoginController._getTokenService">
            <summary>
            Get token service dependency injection
            </summary>
        </member>
        <member name="M:CoffeeMachine.Controllers.CoffeeMachineLoginController.#ctor(CoffeeMachine.Services.Interfaces.IGetTokenService)">
            <summary>
            Constructor of the class that implements the authentication request
            </summary>
            <param name="getTokenService"> </param>
        </member>
        <member name="M:CoffeeMachine.Controllers.CoffeeMachineLoginController.Login(CoffeeMachine.Auth.User.UserModel)">
            <summary>
            Method for obtaining a token
            </summary>
            <param name="userModel"> </param>
            <returns> token </returns>
        </member>
        <member name="T:CoffeeMachine.Dto.BalanceCoffeeDto">
            <summary>
            Class describing the balance of coffee in a coffee machine Dto
            </summary>
        </member>
        <member name="P:CoffeeMachine.Dto.BalanceCoffeeDto.Balance">
            <summary>
            Amount of coffee purchased Dto
            </summary>
        </member>
        <member name="P:CoffeeMachine.Dto.BalanceCoffeeDto.Name">
            <summary>
            Name of coffee Dto
            </summary>
        </member>
        <member name="T:CoffeeMachine.Dto.ErrorDto">
            <summary>
            Class describing errors Dto
            </summary>
        </member>
        <member name="P:CoffeeMachine.Dto.ErrorDto.Message">
            <summary>
            Error message Dto
            </summary>
        </member>
        <member name="P:CoffeeMachine.Dto.ErrorDto.StatusCode">
            <summary>
            Error status code Dto
            </summary>
        </member>
        <member name="M:CoffeeMachine.Dto.ErrorDto.ToString">
            <summary>
            Serializing an entity to a string
            </summary>
            <returns> string </returns>
        </member>
        <member name="T:CoffeeMachine.Dto.MoneyDto">
            <summary>
            A class describing money deposited into a coffee machine
            </summary>
        </member>
        <member name="P:CoffeeMachine.Dto.MoneyDto.Count">
            <summary>
            Number of bills Dto
            </summary>
        </member>
        <member name="P:CoffeeMachine.Dto.MoneyDto.Nominal">
            <summary>
            Denomination of banknotes Dto
            </summary>
        </member>
        <member name="T:CoffeeMachine.Dto.OrderCoffeeDto">
            <summary>
            Class describing the purchase of coffee Dto
            </summary>
        </member>
        <member name="P:CoffeeMachine.Dto.OrderCoffeeDto.Change">
            <summary>
            List of banknotes for change Dto
            </summary>
        </member>
        <member name="T:CoffeeMachine.Middlewares.ExceptionHandlingMiddleware">
            <summary>
            A class that defines custom Middleware for exception handling
            </summary>
        </member>
        <member name="F:CoffeeMachine.Middlewares.ExceptionHandlingMiddleware._logger">
            <summary>
            Defining logging
            </summary>
        </member>
        <member name="F:CoffeeMachine.Middlewares.ExceptionHandlingMiddleware._next">
            <summary>
            Defining RequestDelegate
            </summary>
        </member>
        <member name="M:CoffeeMachine.Middlewares.ExceptionHandlingMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Logging.ILogger{CoffeeMachine.Middlewares.ExceptionHandlingMiddleware})">
            <summary>
            Constructor of the class in which we implement custom error handling
            </summary>
        </member>
        <member name="M:CoffeeMachine.Middlewares.ExceptionHandlingMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Implementing an error handler
            </summary>
            <param name="httpContext"> </param>
        </member>
        <member name="M:CoffeeMachine.Middlewares.ExceptionHandlingMiddleware.HandleExceptionAsync(Microsoft.AspNetCore.Http.HttpContext,System.Net.HttpStatusCode,System.String)">
            <summary>
            Method to which control is transferred after an error occurs
            </summary>
            <param name="context"> </param>
            <param name="httpStatusCode"> </param>
            <param name="message"> </param>
        </member>
        <member name="T:CoffeeMachine.Migrations.initial">
            <inheritdoc />
        </member>
        <member name="M:CoffeeMachine.Migrations.initial.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:CoffeeMachine.Migrations.initial.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:CoffeeMachine.Migrations.initial.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:CoffeeMachine.Migrations.FixedName">
            <inheritdoc />
        </member>
        <member name="M:CoffeeMachine.Migrations.FixedName.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:CoffeeMachine.Migrations.FixedName.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:CoffeeMachine.Migrations.FixedName.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:CoffeeMachine.Migrations.FixedEx">
            <inheritdoc />
        </member>
        <member name="M:CoffeeMachine.Migrations.FixedEx.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:CoffeeMachine.Migrations.FixedEx.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:CoffeeMachine.Migrations.FixedEx.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:CoffeeMachine.Migrations.FixedExPt2">
            <inheritdoc />
        </member>
        <member name="M:CoffeeMachine.Migrations.FixedExPt2.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:CoffeeMachine.Migrations.FixedExPt2.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:CoffeeMachine.Migrations.FixedExPt2.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:CoffeeMachine.Migrations.AlterTable_CoffeeBalance_EditColumn_CoffeeName">
            <inheritdoc />
        </member>
        <member name="M:CoffeeMachine.Migrations.AlterTable_CoffeeBalance_EditColumn_CoffeeName.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:CoffeeMachine.Migrations.AlterTable_CoffeeBalance_EditColumn_CoffeeName.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:CoffeeMachine.Migrations.AlterTable_CoffeeBalance_EditColumn_CoffeeName.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:CoffeeMachine.Migrations.AlterTable_CoffeeBalance_EditColumn_Name">
            <inheritdoc />
        </member>
        <member name="M:CoffeeMachine.Migrations.AlterTable_CoffeeBalance_EditColumn_Name.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:CoffeeMachine.Migrations.AlterTable_CoffeeBalance_EditColumn_Name.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:CoffeeMachine.Migrations.AlterTable_CoffeeBalance_EditColumn_Name.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:CoffeeMachine.Migrations.AlterTable_Coffee_AddColumn_Balance">
            <inheritdoc />
        </member>
        <member name="M:CoffeeMachine.Migrations.AlterTable_Coffee_AddColumn_Balance.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:CoffeeMachine.Migrations.AlterTable_Coffee_AddColumn_Balance.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:CoffeeMachine.Migrations.AlterTable_Coffee_AddColumn_Balance.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:CoffeeMachine.Migrations.AlterTable_Coffee_AddColumn_Balances">
            <inheritdoc />
        </member>
        <member name="M:CoffeeMachine.Migrations.AlterTable_Coffee_AddColumn_Balances.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:CoffeeMachine.Migrations.AlterTable_Coffee_AddColumn_Balances.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:CoffeeMachine.Migrations.AlterTable_Coffee_AddColumn_Balances.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:CoffeeMachine.Models.Coffee">
            <summary>
            The class that defines the essence of coffee in the database
            </summary>
        </member>
        <member name="P:CoffeeMachine.Models.Coffee.Balance">
            <summary>
            Balance of purchased coffee
            </summary>
        </member>
        <member name="P:CoffeeMachine.Models.Coffee.Id">
            <summary>
            ID of each entity
            </summary>
        </member>
        <member name="P:CoffeeMachine.Models.Coffee.Name">
            <summary>
            Name of coffee
            </summary>
        </member>
        <member name="P:CoffeeMachine.Models.Coffee.Price">
            <summary>
            Coffee price
            </summary>
        </member>
        <member name="T:CoffeeMachine.Models.Data.CoffeeContext">
            <summary>
            The class in which we add the database context
            </summary>
        </member>
        <member name="M:CoffeeMachine.Models.Data.CoffeeContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{CoffeeMachine.Models.Data.CoffeeContext})">
            <summary>
            Create a class constructor with parameters
            </summary>
        </member>
        <member name="P:CoffeeMachine.Models.Data.CoffeeContext.Coffees">
            <summary>
            Creating a coffee table in a coffee machine
            </summary>
        </member>
        <member name="P:CoffeeMachine.Models.Data.CoffeeContext.MoneyInMachines">
            <summary>
            Creating a money table in a coffee machine
            </summary>
        </member>
        <member name="T:CoffeeMachine.Models.MoneyInMachine">
            <summary>
            Class describing money in a coffee machine
            </summary>
        </member>
        <member name="P:CoffeeMachine.Models.MoneyInMachine.Count">
            <summary>
            Number of bills
            </summary>
        </member>
        <member name="P:CoffeeMachine.Models.MoneyInMachine.Nominal">
            <summary>
            Nominal of banknotes
            </summary>
        </member>
        <member name="T:CoffeeMachine.Services.CoffeeBuyServices">
            <summary>
            The class in which the purchase of coffee is implemented
            </summary>
        </member>
        <member name="F:CoffeeMachine.Services.CoffeeBuyServices._calculateChange">
            <summary>
            Injecting of change calculation methods
            </summary>
        </member>
        <member name="F:CoffeeMachine.Services.CoffeeBuyServices._db">
            <summary>
            Injecting the database context CoffeeContext
            </summary>
        </member>
        <member name="F:CoffeeMachine.Services.CoffeeBuyServices._decrementAvailableNote">
            <summary>
            Implementation of methods for deducting change from the database
            </summary>
        </member>
        <member name="F:CoffeeMachine.Services.CoffeeBuyServices._incrementAvailableNote">
            <summary>
            Implementation of methods for entering change into the database
            </summary>
        </member>
        <member name="F:CoffeeMachine.Services.CoffeeBuyServices._incrementCoffeeBalances">
            <summary>
            Implementation of methods for entering purchased coffee into the database
            </summary>
        </member>
        <member name="M:CoffeeMachine.Services.CoffeeBuyServices.#ctor(CoffeeMachine.Models.Data.CoffeeContext,CoffeeMachine.Common.Interfaces.ICalculateChange,CoffeeMachine.Common.Interfaces.IDecrementAvailableNotes,CoffeeMachine.Common.Interfaces.IIncrementAvailableNotes,CoffeeMachine.Common.Interfaces.IIncrementCoffeeBalances)">
            <summary>
            Constructor of the class in which coffee is purchased
            </summary>
        </member>
        <member name="M:CoffeeMachine.Services.CoffeeBuyServices.BuyingCoffeeAsync(System.String,System.UInt32[])">
            <inheritdoc />
        </member>
        <member name="M:CoffeeMachine.Services.CoffeeBuyServices.SumUintArray(System.UInt32[])">
            <inheritdoc />
        </member>
        <member name="M:CoffeeMachine.Services.CoffeeBuyServices.ChangeToDto(System.Collections.Generic.List{System.UInt32})">
            <inheritdoc />
        </member>
        <member name="M:CoffeeMachine.Services.CoffeeBuyServices.GetCoffeePrice(System.String)">
            <inheritdoc />
        </member>
        <member name="T:CoffeeMachine.Services.CoffeeMachineStatusServices">
            <summary>
            The class in which we get information about the coffee machine
            </summary>
        </member>
        <member name="F:CoffeeMachine.Services.CoffeeMachineStatusServices._db">
            <summary>
            Injecting the database context CoffeeContext
            </summary>
        </member>
        <member name="M:CoffeeMachine.Services.CoffeeMachineStatusServices.#ctor(CoffeeMachine.Models.Data.CoffeeContext)">
            <summary>
            Constructor of a class in which we get information about the coffee machine
            </summary>
        </member>
        <member name="M:CoffeeMachine.Services.CoffeeMachineStatusServices.GetBalanceCoffeeAsync">
            <inheritdoc />
        </member>
        <member name="M:CoffeeMachine.Services.CoffeeMachineStatusServices.GetBalanceMoneyAsync">
            <inheritdoc />
        </member>
        <member name="T:CoffeeMachine.Services.GetTokenService">
            <summary>
            The class that implements obtaining a token
            </summary>
        </member>
        <member name="F:CoffeeMachine.Services.GetTokenService._jwtOptions">
            <summary>
            Implementing Jwt configurations
            </summary>
        </member>
        <member name="F:CoffeeMachine.Services.GetTokenService._tokenService">
            <summary>
            Injecting token creation methods
            </summary>
        </member>
        <member name="F:CoffeeMachine.Services.GetTokenService._userRepository">
            <summary>
            Implementing a list of users available for authentication
            </summary>
        </member>
        <member name="M:CoffeeMachine.Services.GetTokenService.#ctor(CoffeeMachine.Auth.ITokenService,CoffeeMachine.Auth.IUserRepository,Microsoft.Extensions.Options.IOptions{CoffeeMachine.Settings.Jwt})">
            <summary>
            Constructor of the class in which we receive the token
            </summary>
        </member>
        <member name="M:CoffeeMachine.Services.GetTokenService.GetTokenAsync(CoffeeMachine.Auth.User.UserModel)">
            <inheritdoc />
        </member>
        <member name="T:CoffeeMachine.Services.InputMoneyServices">
            <summary>
            The class that implements depositing funds into a coffee machine
            </summary>
        </member>
        <member name="F:CoffeeMachine.Services.InputMoneyServices._db">
            <summary>
            Injecting the database context CoffeeContext
            </summary>
        </member>
        <member name="F:CoffeeMachine.Services.InputMoneyServices._incrementMoneyInMachine">
            <summary>
            Injecting money depositing methods
            </summary>
        </member>
        <member name="M:CoffeeMachine.Services.InputMoneyServices.#ctor(CoffeeMachine.Models.Data.CoffeeContext,CoffeeMachine.Common.Interfaces.IIncrementMoneyInMachine)">
            <summary>
            Constructor of the class in which we deposit money into the coffee machine
            </summary>
        </member>
        <member name="M:CoffeeMachine.Services.InputMoneyServices.InputingAsync(System.Collections.Generic.List{CoffeeMachine.Dto.MoneyDto})">
            <inheritdoc />
        </member>
        <member name="T:CoffeeMachine.Services.Interfaces.ICoffeeBuyServices">
            <summary>
            An interface that describes methods for buying coffee
            </summary>
        </member>
        <member name="M:CoffeeMachine.Services.Interfaces.ICoffeeBuyServices.BuyingCoffeeAsync(System.String,System.UInt32[])">
            <summary>
            The method by which coffee is purchased
            </summary>
            <param name="coffeeType"> </param>
            <param name="moneys"> </param>
            <returns> OrderCoffeeDto </returns>
            <response code="200"> Success </response>
            <response code="400"> Incorrect data entered </response>
            <response code="404"> Entity not found in the system </response>
        </member>
        <member name="M:CoffeeMachine.Services.Interfaces.ICoffeeBuyServices.SumUintArray(System.UInt32[])">
            <summary>
            Method for getting the amount of an array of entered money
            </summary>
            <param name="moneys"> </param>
            <returns> uint </returns>
        </member>
        <member name="M:CoffeeMachine.Services.Interfaces.ICoffeeBuyServices.ChangeToDto(System.Collections.Generic.List{System.UInt32})">
            <summary>
            Transfer the user's change to the Dto
            </summary>
            <param name="change"> </param>
            <returns> OrderCoffeeDto </returns>
        </member>
        <member name="M:CoffeeMachine.Services.Interfaces.ICoffeeBuyServices.GetCoffeePrice(System.String)">
            <summary>
            Calculating the cost of coffee
            </summary>
            <param name="coffeeType"> </param>
            <returns> uint </returns>
        </member>
        <member name="T:CoffeeMachine.Services.Interfaces.ICoffeeMachineStatusServices">
            <summary>
            An interface that describes methods for obtaining information about a coffee machine
            </summary>
        </member>
        <member name="M:CoffeeMachine.Services.Interfaces.ICoffeeMachineStatusServices.GetBalanceCoffeeAsync">
            <summary>
            Getting the coffee balance from the machine
            </summary>
            <returns> </returns>
            <exception cref="T:System.Exception"> </exception>
        </member>
        <member name="M:CoffeeMachine.Services.Interfaces.ICoffeeMachineStatusServices.GetBalanceMoneyAsync">
            <summary>
            We get a list of funds available in the machine
            </summary>
            <returns> </returns>
            <exception cref="T:System.Exception"> </exception>
        </member>
        <member name="T:CoffeeMachine.Services.Interfaces.IGetTokenService">
            <summary>
            Interface describing receiving a token
            </summary>
        </member>
        <member name="M:CoffeeMachine.Services.Interfaces.IGetTokenService.GetTokenAsync(CoffeeMachine.Auth.User.UserModel)">
            <summary>
            Method that implements receiving a token
            </summary>
            <param name="userModel"> </param>
            <returns> string </returns>
            <response code="401"> Invalid User </response>
        </member>
        <member name="T:CoffeeMachine.Services.Interfaces.IInputMoneyServices">
            <summary>
            Interface describing depositing funds into a coffee machine
            </summary>
        </member>
        <member name="M:CoffeeMachine.Services.Interfaces.IInputMoneyServices.InputingAsync(System.Collections.Generic.List{CoffeeMachine.Dto.MoneyDto})">
            <summary>
            Depositing funds into a coffee machine
            </summary>
            <param name="inputMoney"> </param>
            <response code="400"> Incorrect data entered </response>
        </member>
    </members>
</doc>
